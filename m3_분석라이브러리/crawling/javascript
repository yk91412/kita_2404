
** java script 선택자


  
- getElementById()
  
   파라미터로 찾으려는 id를 전달하여, 해당 element를 찾을 수 있습니다
  
  id는 유일한 값이므로, 하나의 element만 리턴합니다.


  
- getElementsByClassName()
  
  클래스 이름으로 element를 찾아서,이 클래스 이름을 가지는 모든 element 목록을 리턴
  
  이 함수의 이름을 자세히 보면 getElementsByClassName으로
  
  Element's'가 복수 형태인 것은 이 함수가 목록을 리턴하기 때문

  
- getElementByTagName()
  위 코드는 'div' 태그를 가지는 모든 element 목록을 찾아줍니다
  
  다수의 element를 리턴하기 때문에 함수명에 복수형의 'elements'가 포함


  
- querySelector()
  
  DOM에서 원하는 element를 찾기 위해서 querySelector() 를 사용할 수도 있는데,
  
  이 함수는 파라미터로 입력받은 CSS선택자를 사용해서, element를 찾아줍니다.
  
  파라미터로 입력받은 CSS 선택자로 찾은 여러개의 element 중 첫번째 element를 리턴
  
  태그 이름으로 element를 찾을 때는 태그명을 문자열로 넘겨줍니다.

  

- querySelectorAll()
  
  사용법은 querySelector() 와 같다
  
  다만, querySelectorAll()은 이름에서 알수 있듯이, 

  CSS선택자(파라미터로 넘겨준)로 찾은 모든 element 목록을 리턴합니다.


==========================================================================


  ** 입력 필드에 새로운 값 설정

  execute_script('~.value = 새로운 값;')



  ** Selenium only vs with JavaScript

  
- Selenium만 사용하는 경우
  
  코드가 더 직관적이고 Python만으로 작성되며, 디버깅과 유지보수가 용이
  
  하지만, 속도가 느릴 수 있습니다.

  
- JavaScript를 사용하는 경우
  
  복잡한 DOM 조작과 빠른 실행이 가능하지만, 코드가 복잡해지고 유지보수가 어려울 수 있습니다.


ex)

* selenium 사용
  
input_field = driver.find_element(By.ID, 'inputField')
  
input_field.clear()
  
input_field.send_keys('new value')

  
* java script 사용
  
driver.execute_script("document.querySelector('#inputField').value = 'new value';")

  
==========================================================================

** window.scrollTo(0, document.body.scrollHeight);

JavaScript 코드 스니펫으로, 페이지의 맨 아래로 창을 스크롤하는 데 사용


=> window.scrollTo: 창이나 스크롤 가능한 요소를 스크롤하는 메서드

(0, document.body.scrollHeight): 첫 번째 인자 0은 가로 스크롤 위치를 나타내며,

두 번째 인자 document.body.scrollHeight는 페이지의 세로 스크롤 높이를 나타냅니다.

이를 통해 페이지를 맨 아래로 스크롤할 수 있습니다.

** driver.page_source

=> 웹 페이지의 HTML 소스 코드 전체를 가져오는 부분

  javascript를 이용해서 스크롤을 내렸으므로 requests를 사용해 html을 가져오는 것보다

  page_source를 가져오는게 낫다

==> 단순한 HTML 가져오기

웹 페이지가 정적이고 JavaScript를 사용하지 않는 경우,

requests를 사용하는 것이 간단하고 빠를 수 있다


동적 콘텐츠 또는 JavaScript 사용

웹 페이지가 동적이거나 JavaScript를 포함하는 경우에는

Selenium을 사용하여 브라우저를 제어하는 것이 필요할 수 있다


