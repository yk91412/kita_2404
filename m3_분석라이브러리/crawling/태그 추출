
## 과제풀이


* find - select

* find_all - select_one

** select와 차이점

  find() 메서드는 첫 번째로 일치하는 요소 하나만 반환하므로,

  여러 요소를 찾고자 할 때는 반복문이나 인덱싱을 통해 추가 처리가 필요할 수 있다
  
  select() 메서드는 CSS 선택자를 사용하기 때문에, 복잡한 구조의 요소를 특정할 때 유용하며,

  여러 요소를 한 번에 선택할 수 있다

- get_text()

  HTML이나 XML 문서에서 모든 텍스트를 추출하는 기능

  모든 태그를 제외한 순수한 텍스트만을 반환


  => for문을 돌리지 않고 추출 가능

    ex) for p in ps:
          print(p)


        print(ps.get_text()) 의 출력값은 같다


- class_

  class는 파이썬의 예약어이기 때문에, HTML 태그의 class 속성을 찾을 때는 class_라는 특별한 인수를 사용


- 자식 태그 추출

- 다음 형제 태그 (s를 붙이면 형제'들'로 추출)

       (1) .next_siblings

        현재 요소 이후에 있는 모든 형제 요소들을 순회 가능한 제너레이터로 반환

      => for문을 돌려야함

       (2) .find_next_sibling()

        다음 형제 요소 중에서 특정 조건을 만족하는 첫 번째 요소를 직접적으로 반환

** 태그의 이름을 알고싶다면

  .name 사용

- 이전 형제 태그

  .find_previous_sibling()



- 부모 태그 추출

  (1) .parent : bs 객체에서 직접적으로 사용할 수 있는 속성


      직계 부모 요소만을 반환하며, 해당 요소의 위치에 있는 바로 위의 요소를 가져옴


  (2) .find_parent() : bs객체에서 호출하여 사용할 수 있는 메서드


      조건에 맞는 첫 번째 부모 요소를 반환하며, CSS 선택자와 유사한 방식으로 사용할 수 있다


- 자식 태그 추출

   (1) .children

    현재 요소의 직접적인 자식 요소들을 순회 가능한 제너레이터로 반환

  
   (2) .findChildren()

    특정 조건을 만족하는 자식 요소들을 리스트로 반환
    이 메서드는 BeautifulSoup 객체에서는 사용할 수 없으며, lxml 파서에서 제공



============================================================



        ---- CSS 셀렉터----

  HTML 요소를 선택하기 위해 사용
  
  크롤링 시 특정 요소를 선택할 때 유용


- id: 특정 id를 가진 요소를 선택

- .class: 특정 클래스를 가진 요소를 선택

- tagname: 특정 태그명을 가진 요소를 선택



[ CSS 셀렉터의 주요 유형과 그 사용법]


1. 기본 셀렉터


    - 요소 셀렉터
    문법: element

    설명: 지정된 태그 이름의 모든 HTML 요소를 선택

    예시: p { color: blue; }는 모든 <p> 요소의 텍스트 색상을 파란색으로 설정


    - 클래스 셀렉터

    문법: .class

    설명: 특정 클래스 이름을 가진 모든 요소를 선택

    예시: .highlight { background-color: yellow; }

        클래스가 "highlight"인 모든 요소의 배경색을 노란색으로 설정

    
    - ID 셀렉터

    문법: #id

    설명: 특정 ID를 가진 요소를 선택/ HTML 문서에서 ID는 고유해야 함

    예시: #header { font-size: 24px; }는 ID가 "header"인 요소의 글꼴 크기를 24px로 설정


2. 속성 셀렉터


    - 속성 존재 셀렉터

    문법: [attribute]

    설명: 특정 속성이 있는 모든 요소를 선택

    예시: [title] { border: 1px solid black; }는 "title" 속성이 있는 모든 요소에 테두리를 추가


    - 특정 속성 값 셀렉터

    문법: [attribute=value]

    설명: 지정된 속성이 특정 값을 가진 모든 요소를 선택

    예시: [type="text"] { color: green; }는

          type 속성이 "text"인 모든 입력 요소의 텍스트 색상을 초록색으로 설정


3. 결합 셀렉터


    - 자손 셀렉터

    문법: ancestor descendant

    설명: 특정 요소의 자손인 모든 요소를 선택

    예시: div p { margin: 10px; }는 <div> 요소의 자손인 모든 <p> 요소에 10px의 마진을 설정


    - 자식 셀렉터

    문법: parent > child

    설명: 특정 요소의 직계 자식인 모든 요소를 선택

    예시: ul > li { list-style-type: none; }는

          <ul> 요소의 직계 자식인 모든 <li> 요소의 리스트 스타일을 제거



    - 인접 형제 셀렉터

    문법: element + adjacent

    설명: 특정 요소의 바로 다음 형제 요소를 선택

    예시: h1 + p { margin-top: 0; }는 <h1> 요소 바로 다음에 오는 <p> 요소의 위쪽 마진을 제거



    - 일반 형제 셀렉터

    문법: element ~ siblings

    설명: 특정 요소 이후의 모든 형제 요소를 선택

    예시: h2 ~ p { color: grey; }는 <h2> 요소 이후의 모든 <p> 요소의 텍스트 색상을 회색으로 설정


4. 가상 클래스 셀렉터

    - 동적 가상 클래스 셀렉터

    문법: :pseudo-class

    설명: 요소의 특정 상태를 선택

    예시: a:hover { color: red; }는 링크에 마우스를 올렸을 때 텍스트 색상을 빨간색으로 변경


    - 구조적 가상 클래스 셀렉터

    문법: :nth-child(n)

    설명: 부모 요소의 자식 중 특정 위치에 있는 요소를 선택

    예시: li:nth-child(odd) { background-color: #f2f2f2; }는

          홀수 번째 <li> 요소의 배경색을 회색으로 설정


5. 가상 요소 셀렉터

    문법: ::pseudo-element

    설명: 요소의 일부를 선택

    예시: p::first-line { font-weight: bold; }는 단락의 첫 번째 줄을 굵게 만듭니다


6. 속성값 서브스트링 매칭 셀렉터

    - 시작 문자열 매칭 셀렉터

    문법: [attribute^=value]

    설명: 특정 속성 값이 지정된 문자열로 시작하는 요소를 선택

    예시: [class^="btn"] { background-color: blue; }는

          클래스 이름이 "btn"으로 시작하는 모든 요소의 배경색을 파란색으로 설정



    - 끝 문자열 매칭 셀렉터

    문법: [attribute$=value]

    설명: 특정 속성 값이 지정된 문자열로 끝나는 요소를 선택

    예시: [class$="danger"] { color: red; }는

        클래스 이름이 "danger"로 끝나는 모든 요소의 텍스트 색상을 빨간색으로 설정




    - 포함 문자열 매칭 셀렉터

    문법: [attribute*=value]

    설명: 특정 속성 값이 지정된 문자열을 포함하는 요소를 선택

    예시: [class*="nav"] { font-size: 18px; }는

        클래스 이름에 "nav"를 포함하는 모든 요소의 글꼴 크기를 18px로 설정





================================================================================


- get('href')  ['href'] 차이

    a.get('href')는 a 요소에 href 속성이 없을 때 안전하게 처리할 수 있는 방법이며

    속성이 존재하지 않을 때 기본값을 설정
    
    a['href']는 속성이 반드시 존재해야 하며, 이를 전제로 접근하는 방식



- prettify() 메서드

    HTML 문서의 구조를 반영하여 각 요소를 들여쓰기하여 보기 좋게 정렬


- 클래스 추출

  '.클래스명'



================================================================================


  ---- XPATH ----


    XML 문서의 경로를 지정하기 위한 언어로, HTML 문서에서도 사용

//div[@id='main']

      id가 'main'인 모든 <div> 요소를 선택

//a/text():

    - //: 문서의 어디에서든 지정한 요소를 찾습니다
    즉, 루트 요소부터 시작해서 모든 자식 요소를 포함하여 탐색
    
    - a: 찾고자 하는 요소의 이름 / 여기서는 <a> 태그를 의미
    
    - /text(): 지정한 요소의 텍스트 노드를 선택 / <a> 태그 내부의 텍스트를 의미


** 사용

  a = html.fromstring(html문서) => html 문서를 xml 요소로 변환

  a.xpath(~) 


================================================================================


  ---- 웹페이지의 동적 로딩 ----


    일부 웹페이지는 JavaScript를 통해 동적으로 콘텐츠를 로드를 하지만
    
    단순히 HTML을 요청하는 것으로는 모든 콘텐츠를 얻을 수 없으며,
    
    Selenium과 같은 도구를 사용하여 JavaScript를 실행하는 것이 필요할 수 있다





  ---- HTTP 요청과 응답 ----

    웹 크롤링은 HTTP 프로토콜을 통해 웹페이지에 접근
    
    HTTP 요청과 응답의 기본 개념을 이해하는 것이 중요하다
    
    - HTTP 메서드 (GET, POST 등)
    - 상태 코드 (200, 404 등)


  ---- 크롤링 도구와 라이브러리 ----


    - BeautifulSoup: HTML과 XML 파일을 파싱하는 라이브러리
    
    - Requests: HTTP 요청을 보내기 위한 라이브러리
    
    - Selenium: 웹 브라우저를 자동화하고 동적 웹페이지를 크롤링하는 데 사용



================================================================================


  - 전체가 아닌 특정 속성을 가진 태그만 추출하고 싶을 때

    find_all/find (attrs = {'data-gfp-banner-size':"830x130"})

  - select / select_one

    id가 u_skip => ('#u_skip')

    id가 u_skip인 div 내부의 모든 a 태그 선택

    => ('#u_skip a')


    id가 'wrap'인 div 내부의 id가 'header'인 div 선택

    => ('#wrap #header')


================================================================================




    Copy Selector
  
  - copy selector는 해당 요소로 접근할 수 있는 CSS 선택자를 복사
  
  - 이를 통해 JavaScript나 Selenium과 같은 도구에서 해당 요소를 선택할 수 있다
  
  
  Copy XPath
  
  - copy XPath는 해당 요소로 접근할 수 있는 XPath를 복사
  
  - XPath는 XML 문서의 특정 요소를 선택할 때 사용되는 언어로, HTML에도 적용할 수 있다
  


  ** 동적 콘텐츠 로딩 : selenium 사용

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time

options = Options()
options.add_argument('--start-maximized')
options.add_experimental_option('detach',True)

driver = webdriver.Chrome(options=options)


- Naver 페이지 열기
url = 'https://www.naver.com/'
driver.get(url)

- 페이지 로딩 대기
time.sleep(2) #2초 대기(필요에 따라 조정)

- 뉴스스탠드 링크 찾기
try :
    newsstand_link = driver.find_element(By.CSS_SELECTOR, '#newsstand > div.ContentHeaderView-module__content_header___nSgPg > div > ul > li > span > a')
    print(newsstand_link.text)
except:
    print("뉴스스탠스 링크를 찾을 수 없습니다")

- 브라우저 닫기
driver.quit()


================================================================================


  ---- 웹 크롤링에 사용되는 도구 ----

- BeautifulSoup: Python 라이브러리로, HTML 및 XML 문서를 구문 분석하고 데이터를 추출하는 데 사용

- Scrapy: 웹 크롤링을 위한 Python 프레임워크로, 효율적이고 확장성이 높은 크롤러를 쉽게 만들 수 있다

- Selenium: 웹 브라우저 자동화 도구로, JavaScript가 동적으로 로드되는 페이지를 크롤링할 때 유용

- Requests: Python의 HTTP 라이브러리로, 웹 페이지 요청을 쉽게 할 수 있다




---- html.parser vs. lxml ----

- 파이썬에서 HTML 및 XML 문서를 파싱(parsing)하는 라이브러리


** html.parser

  HTML 문서를 파싱하는 데에 적합한 파서

  파이썬의 기본 라이브러리로 제공되며 파이썬 내부적으로 구현되어 있으며,
  
  외부 종속성이 없으므로 파이썬과 함께 설치되는 패키지만 사용할 수 있다

** lxml

  C 언어로 작성된 파이썬 외부 라이브러리로서

  HTML 및 XML 문서를 파싱하는 데에 적합하며
  
  파서 성능이 매우 우수


- HTML 문서를 파싱하는 경우에는 html.parser를 사용하는 것이 간단하고 편리

- 대용량의 XML 문서나 매우 복잡한 HTML 문서를 파싱해야 하는 경우에는 lxml을 사용하는 것이 더 효율적



---- 크롤링 시 헤더를 포함하면 성공적으로 데이터를 가져올 가능성을 높여줌 ----


      headers : HTTP 요청에 포함되는 메타데이터


    - User-Agent: 클라이언트 애플리케이션(브라우저 등)
    
    - Accept: 서버가 어떤 콘텐츠 타입을 반환해야 하는지 지정
    
    - Accept-Language: 클라이언트가 선호하는 언어를 지정
    
    - Referer: 요청이 발생한 이전 페이지의 URL을 지정
    
    - Host: 요청을 보내는 서버의 호스트 이름을 지정
    
    - Connection: 서버와 클라이언트 간의 연결 유형을 지정


ex) 

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
    'Accept-Language': 'en-US,en;q=0.9',
    'Referer': 'http://example.com',
}

  requests.get(url,hearders = headers)
