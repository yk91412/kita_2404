

- 벡터

  크기와 방향을 가지는 물리량 / 1차원 배열로 표현

  데이터 포인트 표현하거나 특성 벡터로 사용

    => 기존의 차원과 의미가 다름

        ** 벡터를 구성하는 요소의 개수를 차원이라고함


      ex) np.array([1,2,3]) => 1차원 배열, 3차원 벡터 생성



- 행렬

  행과 열로 구성된 2차원 배열

  데이터셋, 변환 행렬, 가중치 행렬 등으로 사용


- 스칼라

  하나의 수치 (5,-3)

  벡터나 행렬의 요소로 사용

===================================================================

  - 벡터

    행백터 : 하나의 행으로 구성된 벡터

    열벡터 : 하나의 열로 구성된 벡터

    ex) 벡터간의 내적은 보통 행벡터와 열벡터의 곱으로 표현

    * 연산


    - 덧셈과 뺄셈

      같은 크기의 두 벡터는 각 요소별로 더하거나 뺄 수 있다

    - 스칼라 곱셈

      벡터는 스칼라(단순 숫자 값)와 곱할 수 있으며, 이는 벡터의 길이를 스칼라만큼 늘리거나 줄인다

    - 내적(Dot Product)

      두 벡터의 각 요소의 곱을 모두 더하는 연산으로, 두 벡터 간의 관계를 측정하는 데 사용.


    * 실용적 예


  - 데이터 포인트의 표현

      사람에 대한 데이터가 나이, 키, 몸무게 등의 특성을 가진다면

      이를 [나이, 키, 몸무게]와 같은 벡터로 표현할 수 있다


    - 기계 학습 모델의 입력

      의료 데이터를 기반으로 질병을 예측하는 모델에서 각 환자의 데이터 포인트는 하나의 벡터로 표현될 수 있다
    

    * 배치 데이터용 행렬

      여러 데이터 포인트를 처리할 때 각 행은 데이터 포인트를 나타내고 각 열은 기능을 나타내는 행렬이 사용된다

===================================================================


    - 특징벡터

      정의 

        특징 벡터는 여러 개의 특성(feature)들로 구성된 벡터

        이 벡터의 각 요소는 데이터의 특정 속성을 나타낸다


        용도

          특징 벡터는 머신 러닝 모델의 입력으로 사용

          데이터를 수치적으로 표현하여 모델이 이해할 수 있도록 한다

          다양한 특성을 결합하여 데이터 포인트를 다차원 공간의 한 점으로 표현


===================================================================

   - 행렬과 벡터

   n차원 벡터는  1×n  행렬(행벡터) 또는  n×1  행렬(열벡터)로 표현

  ** 행렬-벡터 곱

      행렬A와 벡터v의 곱은 또 다른 벡터를 생성합니다

      ex) A가 m×n 행렬이고 v가 n차원(nx1) 열벡터일 때, Av는 m차원(mx1) 열벡터

    * 벡터의 내적

        두 벡터 u와 v의 내적은 행벡터 u와 열벡터 v의 곱으로 계산할 수 있고 그 결과는 스칼라 값


      행렬의 역할

    벡터에 행렬을 곱하면, 선형 변환을 하여 해당 벡터가 변환된 새로운 벡터를 얻을 수 있다

    예를 들어, 회전 행렬은 벡터를 회전시키는 역할을 한다

    데이터셋을 처리할 때, 행렬을 사용하여 여러 데이터 포인트(벡터)를 동시에 변환하거나 조작할 수 있다

    신경망에서 각 층은 기본적으로 선형 변환(가중치 행렬)과 비선형 활성화 함수의 조합으로 구성

    선형 변환을 통해 입력 데이터를 다음 계층으로 전달하고, 비선형 활성화 함수를 통해 모델의 표현력을 높인다

    ex) A = np.array([[1,2,3],[4,5,6]])

        [[1 2 3]
         [4 5 6]] 

      v = np.array([[1],[0],[-1]])

            [[ 1]
             [ 0]
             [-1]] 


        np.dot(A,v)

                [[-2]
                 [-2]]


        A      v
      (2,3) @ (3,1) => (2,1)

    앞에 열의 수와 뒤에 행의 수가 같아야지만 가능




===================================================================

- 행렬의 종류


  ** np.dot(A,B) : A와 B의 내적계산하는 함수

  ** np.square(A) : A의 제곱을 구해주는 함수(다차원 배열에서도 가능)



  1. 항등행렬(단위행렬) 

      행렬 곱셈 연산에 항등원으로 작용하는 행렬

      대각선 요소는 모두 1이고, 나머지 요소는 모두 0인 정사각 행렬

      역행렬이 동일한 유일한 행렬

      (np.allclose(A,B) => 두 배열이 같은지 판별)


      ex) np.indentity(5) => 대각선은 1, 나머지는 0인 항등행렬 생성

          np.indentity(단위 행렬을 생성하는 numpy 함수)

          = np.eye()



  2. 대각행렬

      주 대각선 원소들을 제외한 원소들이 모두 0인 정방행렬

      ex) np.diag([~])
  
          대각행렬과 벡터를 곱할 땐 요소의 수가 같아야한다

        ex) np.diag([1,2,3])

            np.array([1,2,3])

            => 요소 수(3개)가 같아야 np.dot이나 diag * array가능


  3. 영행렬

    모든 원소가 0인 행렬로 곱셈 연산에서 영원으로 작용하는 행렬

    ex) np.zeros(())

    명확성과 코드의 가독성을 위해 1차원이라도 소괄호를 두 번 하는 것이 좋다

    ex) np.zeros((3,)) => 길이가 3인 1차원 배열

      ([3,])도 가능하나 튜플을 사용하는 이유는 

      수정이 안되는 튜플의 특징을 이용하여 요소들을 고정시키기 위해서




  4. 전치행렬

    주대각선 원소를 기준으로 행과 열을 바꿔주는 행렬

    행렬.T or 행렬.transpose()




  5. 대칭행렬

    주대각선을 기준으로 대칭을 이루는 행렬로서 전치 행렬이 자기 자신과 같은 행렬



  6. 정방행렬

    행과 열의 수가 같은 행렬

    ex) np.arange(9).reshape(3,3)

        np.full(2,2),7) => 2행 2열을 7로 채우겠다

  7. 대각합
  
    정사각 행렬의 대각선 요소의 합

    ex) np.trace(행렬)

    np.arange(9).reshape(3,3) =>

                                [[0 1 2]
                                 [3 4 5]
                                 [6 7 8]]

                               12 출력 : 가운데 대각선의 합만 구한다 


  8. 역행렬

    원래 행렬 A와 곱할 때 단위 행렬이 되는 행렬

    ex) np.linalg.inv(행렬)

      np.linalg.det(행렬) : 결과가 0이면 역행렬이 존재하지 않는다



        행렬 @ 역행렬

      => 행렬 A와 그 역행렬을 곱했을 때 원래 행렬 A가 나오는 것


    ** @ 연산자

         `*` 연산자는 행렬의 요소별(element-wise) 곱셈을 수행

          `@` 연산자는 행렬 곱셈을 수행




  9. 삼각행렬

    주대각선 위 또는 아래의 모든 요소가 0인 특별한 종류의 정방행렬



  10. 상삼각행렬
      
      대각선 아래 모든 요소가 0인 행렬

      ex) np.triu(~)




  11. 하삼각행렬
    
      대각선 위 모든 요소가 0인 행렬

      ex) np.tril(~)



===================================================================


- 벡터와 행렬의 연산

   * 벡터 / 행렬의 덧셈과 뺄셈 : 같은 위치에 있는 원소끼리 요소별 연산


   * 스칼라와 벡터/행렬의 곱셈 : 스칼라를 벡터로 변환한 연산(브로드캐스팅)
  

   * 벡터와 벡터의 곱셈 : 내적

      두 벡터의 차원(길이)가 같아야 함

      앞의 벡터가 행 벡터이고 뒤의 벡터가 열벡터여야 한다

      내적의 결과는 스칼라값

      np.dot() or @연산자로 계산

    ** numpy에서는 1차원 배열끼리도 내적을 계산(앞:행,뒤:열벡터로 가정)

      1차원 ndarray는 전치연산 정의 x


===================================================================


  - 행렬 곱셈 (Matrix Multiplication)

      두 행렬을 곱하는 연산

      첫 번째 행렬의 열 수와 두 번째 행렬의 행 수가 같아야 한다

      용도: 선형 변환, 뉴럴 네트워크의 가중치 계산 등에 사용

      ex) x.dot(y) or np.dot(x,y)


  - np.dot과 np.matmul의 차이

    np.dot은 1차원 배열에 대해서는 내적을, 2차원 배열에 대해서는 행렬 곱셈을
더 높은 차원의 배열에 대해서는 일반화된 내적을 수행.

np.matmul (또는 @ 연산자)은 모든 경우에 행렬 곱셈을 수행하며, 더 직관적인 행렬 곱셈 동작을 제공.

3차원 이상 배열에서 dot은 입력 배열의 차원을 변경시키는 반면 matmul은 입력 배열의 차원을 보존



  - 내적과 행렬곱 차이

    내적 

      두 벡터의 대응 요소의 곱의 합

      두 벡터의 길이가 같아야함

      두 개의 1차원 배열 (벡터) => 스칼라(단일 숫자)

      용도 : 벡터의 길이, 두 벡터 간의 각도 계산, 투영

    행렬곱

      첫 번째 행렬의 행과 두 번째 행렬의 열의 곱의 합

      첫 번째 행렬의 열 수 = 두 번째 행렬의 행 수

      두 개의 2차원 배열 (행렬) => 행렬

      용도 : 선형 변환, 시스템 방정식 해법, 데이터 분석



    
