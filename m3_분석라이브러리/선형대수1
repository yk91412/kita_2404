

## 행렬곱을 할 때 연산 순서

  연산 순서에 따라 결과가 달라질 수 있다

  => 연산의 의미에 따라 결정

    1. 입력 벡터 X를 가중치 행렬 W에 곱하여 새로운 출력 벡터를 계산하는 경우

        np.dot(X,W)사용

    2. 가중치 행렬 W를 입력 벡터 X에 곱하여 각 출력 뉴런에 대한 값을 계산하는 경우

        np.dot(W,X)를 사용


  ** numpy의 행렬 연산에 대한 유연성

      p = np.array([1, 2]), T = np.array([[2, 0], [0, 3]]) 일때

      p_prime = np.dot(T,p) p1 = np.dot(p,T) 둘의 결과값은 같다

      1행 3열, 3행 1열 => 1행 3열로 출력됨

      *** 3행 1열 벡터(2차원)와 3행 3열 행렬을 곱할 땐 3행 1열의 값으로 출력됨

=========================================================================

  - 고유값, 고유벡터

    주어진 행렬 A와 고유값 λ, 그리고 고유벡터 v 사이의 관계는 다음과 같은 방정식으로 표현

      Av = λv 

     * A는  n×n  행렬

     * v는 0이 아닌 n차원 벡터로, A의 고유벡터

     * λ는 스칼라 값으로, A의 고유값

      고유값의 개수는 행렬의 크기에 따라 결정

        => 주어진 n×n 정사각 행렬 A는 최대 n개의 고유값을 가질 수 있다

이 방정식의 의미는 행렬 A가 고유벡터 v를 변환할 때, 고유벡터 v의 방향은 변하지 않고 크기만 λ 배로 변한다는 것이며

고유벡터는 행렬 변환에 의해 방향이 바뀌지 않는 특별한 벡터를 의미

  구하는 방법

  np.linalg.eig() 함수는 고유값과 고유벡터를 담은 두 개의 배열을 반환


  -=> 주성분 분석


  - 행렬식

=========================================================================


  데이터 분석 및 머신러닝 적용

    - 데이터 표현

    - 회귀 분석

    - 주성분 분석

    - 뉴럴 네트워크

    - 클러스터링

    - 신경망


  
